

You basically start placing somewere in the project folder an then you do

	$ sphinx-quickstart [foldername]
	

>>>> The index is like this (index.rst)

	.. DiNest documentation master file, created by
	   sphinx-quickstart on Fri Aug 27 19:25:10 2021.
	   You can adapt this file completely to your liking, but it should at least
	   contain the root `toctree` directive.

	Welcome to DiNest's documentation!
	==================================

	.. toctree::
	   
	   autogen


	Indices and tables
	==================

	* :ref:`genindex`
	* :ref:`modindex`
	* :ref:`search`

>>>>> to set the path to generate documentation use (conf.py):
	
	sys.path.insert(0, os.path.abspath('path'))

>>>>> to add the extention that produces autodoc use (conf.py):
	
	extensions = ['sphinx.ext.autodoc']


>>>>> to generate documentation for stuff use (autogen.rst):

	Code Description
	==========

	Code description generated automatically from docstrings.
	 .. automodule:: my_NS
	 	:members:
	 .. automodule:: AIE_sampling
	 	:members:

 	
>>>> to prevent sphinx from generating code for std libraries use (conf.py):
	import mock
	autodoc_mock_imports = ["numpy", 'matplotlib']
	
	

------------ DOCSTRING FORMAT ------------------------
>>>> basics:

	TEXT EMPHASIS
	
	**a** is bold
	*a* is italic
	``a`` is monospace
	
	LISTS
	
	#. is element of numbered list
	* is element of not numbered list
	
	BLOCKS
	
	.. note:: this is a note
	.. warning:: this is a warning
	.. code_block:: python 
		this is a block of code
		
	the space between .. and stuff is important
	
	PARAM & RETURN
	
	Technically you should write a bunch of stuff like
		:param u: bla bla
		:type u: int
		
	but it is clearly a pain in the ass, 
	so you add the extentions for GOOGLE and NUMPY docstings
	
	>>>>extensions = ['sphinx.ext.napoleon'] 	(conf.py)
	
	and
	
	>>>>>extensions = ['numpydoc']		(conf.py)
	
	but i am still managing to understand my own guidelines.
	
--------NUMPYDOC  and NAPOLEON----------------
	if you use the numpydoc extention as (conf.py):
	
	>>>>> extensions = ['sphinx.ext.autodoc', 'numpydoc']
	
	the aforementioned rules change dramatically.
	
	I believe napoleon by itself is a fair-enough compromise between the excessively tedious standard format and the long-haired-freak-ish style of google.
	
	So

--------- NAPOLEON ----------

It recognises automatically (for some keywords) what you are trying to say

Args:
	budello : ``type``
		Do stuff like yur mother
	acc : ``pistol``
		I'm finishing the bullshit to fill the space
		
		Note:
			note about variable acc

Returns:
	type: A multiline description of the returned value
	
	The type is whatever you write before the colon
	
	Supports restructured text using :: (?? not so clear)
		
Example:
	
	>>> code lines start with the >>> symbol. it is necessary to add the newline and spaces, so it is '\n>>> '
	
Probably, you can add shell commands by 

	$ stuff


For what concernes math, the syntax is somewat like this:

	Bla bla :math:`clever stuff goes here` 	(inline math)
	
	.. math::
	
		Display math as big as the sheet
	
The basic commands seems to work pretty well too

NOTE: depending on what style you use it displays things differently:

1) this displays varname(type *written in monospace*) - description
	Args
	----
		p1 : int
			description

2) this displays the same but with unspecified type
	Args:
		p1 : int
			d			
Furthermore, if something in type for mode 1) is specified in monospace, the rest will be normal font


NOTE: the return section also is different:

1) this produces:

	(result)
	Returns
		description
		
	Return type: type
	
	
	(code)
	Returns:
		type : description 
	

------ CLASSES

Classes description is a little trickier and wider in possibility

Attributes can be decribed like params:

	Attributes
	----------
	attr1 : int
		Dumb shit
		
but they get displayed differently.

They can also be documented in inline comments using #: stuff either before the declarartion or beside it

__init__ function (since is ~private ) gets displayed only specifying special-members in autogen:

.. automodule:: file
	:special-members: __init__
	:members:
	


	
	
	
	
	
	
	

